@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

title US024 - Sequence Diagram (SD)

autonumber

actor "Green Space\nManager" as GSM
participant ":PostponeTaskUI" as UI
participant ":PostponeTaskController" as CTRL
participant ":Repositories" as REPO
participant "repositories\n:Repositories" as REPOInstance
participant "agenda\n:Agenda" as AGENDA
participant ":TaskMapper" as TaskMapper
participant ":TaskDTO" as TaskDTO
participant "taskDTO\n:TaskDTO" as getTaskDTO
participant "task\n:Task" as Task
participant ":Date" as Date

activate GSM

    GSM -> UI : asks to postpone a task in the agenda
    activate UI

    UI -> CTRL** : new PostPoneTaskController()

    UI -> CTRL : getTasksInAgenda()
    activate CTRL

        CTRL -> REPO : getInstance();
        activate REPO

            REPO --> CTRL : repositories
        deactivate REPO
        CTRL -> REPOInstance : getAgenda()
        activate REPOInstance

            REPOInstance --> CTRL : agenda
        deactivate REPOInstance
        CTRL -> AGENDA : getTaskList()
        activate AGENDA

            AGENDA --> CTRL : taskList
        deactivate AGENDA

        CTRL -> TaskMapper: getTaskDTOlist(taskList)
        activate TaskMapper

loop for each task in taskList
            TaskMapper -> TaskDTO**: toDTO(task)
            note right of TaskDTO
                TaskDTO contains the title, description,
                 status and urgency of the task
            end note
            TaskMapper --> TaskMapper : add(TaskDTO)
end loop
            TaskMapper --> CTRL : taskDTOList
        deactivate TaskMapper
        CTRL --> UI : taskDTOList

    deactivate CTRL

loop until user doesn't select a valid option
        UI --> GSM : displays all tasks in the agenda and asks to select one
    deactivate UI

    GSM -> UI : selects a task
    activate UI
    |||
end loop
        UI --> UI : keepData(task)
loop until data is valid
        UI --> GSM : asks for a new start date
    deactivate UI

    GSM -> UI : types a new date
    activate UI
        UI --> UI : validateDate(startDate)
end loop
        UI --> UI : keepData(startDate)
        UI --> GSM : shows all data and requests confirmation
    deactivate UI

    GSM -> UI : confirms data
    activate UI

        UI -> CTRL : postponeTask(taskDTO, startDate)
        activate CTRL

            CTRL -> REPO : getInstance();
            activate REPO

                REPO --> CTRL : repositories
            deactivate REPO
            CTRL -> REPOInstance : getAgenda()
            activate REPOInstance

                REPOInstance --> CTRL : agenda
            deactivate REPOInstance
            CTRL -> AGENDA : postponeTask(taskDTO, startDate)
            activate AGENDA

                AGENDA --> getTaskDTO** : getTitle()
                AGENDA --> AGENDA : getTaskByTitle(taskTitle)
                AGENDA -> Task : setStartDate(startDate)
                activate Task

                    Task -> Date** : new Date(startDate)
                    Date --> Date : validateDate(startDate)
                    Task --> AGENDA : operation success
                deactivate Task

                AGENDA --> CTRL : operation success
            deactivate AGENDA

            CTRL --> UI : operation success
        deactivate CTRL

        UI --> GSM : displays operation success
    deactivate UI

@enduml