@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

title US026 - Sequence Diagram

autonumber


actor "Green Space\nManager" as GSM
participant ":AgendaUI" as UI
participant ":SelectVehiclesPopupUI" as POPUP
participant ":AgendaController" as AGENDA_CTRL
participant ":AssignVehiclesToEntryAgendaController" as CTRL
participant ":Repositories" as REPO
participant "repositories\n:Repositories" as REPOInstance
participant "agendaRepository\n:AgendaRepository" as AgendaRepository

activate GSM

GSM -> UI: Asks to assign one or more vehicles to an entry in the Agenda
activate UI
UI -> AGENDA_CTRL : getAgendaTaskDTOManagerList()
    activate AGENDA_CTRL
    |||
    ref over AGENDA_CTRL
    SD_managerSpecificAgendaDTO

    end ref
    AGENDA_CTRL --> UI : managerSpecificAgendaDTO
    deactivate AGENDA_CTRL
    |||

    loop until doesn't select a valid option

    UI --> GSM: Shows the list of tasks in the agenda and asks to select one
deactivate UI

GSM -> UI : Selects a task
activate UI
UI --> UI : validates selected option
|||
end loop

    UI --> UI : keepData(task)

    UI -> POPUP : Shows the popup with the list of vehicles
    deactivate UI
    activate POPUP

    POPUP -> CTRL : getVehicles()
    activate CTRL

    ref over CTRL
    SD_getVehicleListDTO

    end ref

    CTRL --> POPUP : vehicleListDTO
    deactivate CTRL


    |||
    loop until doesn't choose to advance
    POPUP --> GSM: Shows the list of vehicles and asks to select the vehicles needed
deactivate POPUP

GSM -> POPUP : selects a vehicle
activate POPUP
POPUP --> POPUP : validates selected option
end loop
|||
POPUP --> UI : Sends the list of selected vehicles to main UI
deactivate POPUP
activate UI
    |||
    UI --> UI : keepData(List<Vehicle> selectedVehicles)
    |||
    UI -> CTRL : assignVehiclesToTaskAgenda(agendaTaskDTO, selectedVehiclesDTO)

    activate CTRL
    ref over CTRL
        SD_getVehicleListDomainObject

        end ref
        CTRL -> CTRL : vehicleList

        CTRL -> REPO : getInstance()
                                activate REPO

                                    REPO --> CTRL : repositories
                                deactivate REPO
                                CTRL -> REPOInstance: getAgendaRepository()

                                activate REPOInstance

                                    REPOInstance --> CTRL : agendaRepository
                                deactivate REPOInstance

                            CTRL -> AgendaRepository : assignVehiclesToTaskAgenda(title, greenSpaceName,\nworkStartDate, status, vehicleList)
                            activate AgendaRepository
                            AgendaRepository -> Task** : assignVehicles(vehicles)
                                                activate Task
                                                loop for each vehicle in the list

                                                alt all vehicle are available

                                                Task -> Vehicle** : addWorkPeriod(workPeriod)

                                                else vehicles are not available

                                                note over Task, Team
                                                An error message will be shown indicating
                                                   the selected vehicles are not available
                                                end note
                                                deactivate Task

                                                end
                                                end loop

                                                AgendaRepository --> CTRL : task Optional


                                                deactivate AgendaRepository
                                                CTRL -> UI : operation success
                                                deactivate CTRL




    UI --> GSM: Displays operation success
deactivate UI

@enduml